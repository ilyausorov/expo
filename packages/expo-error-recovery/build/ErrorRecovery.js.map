{"version":3,"file":"ErrorRecovery.js","sourceRoot":"","sources":["../src/ErrorRecovery.ts"],"names":[],"mappings":"AAAA,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,IAAI,oBAAoB,GAAkB,IAAI,CAAC;AAC/C,IAAI,aAAa,CAAC;AAClB,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;IACzB,aAAa,GAAG,UAAU,CAAC,gBAAgB,EAAE,CAAC;IAC9C,oCAAoC;IACpC,iIAAiI;IACjI,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;QACnD,IAAI,iBAAiB,CAAC,iBAAiB,EAAE;YACvC,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;SACjE;QACD,aAAa,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAChC,CAAC,CAAC,CAAC;CACJ;KAAM;IACL,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC;IAE/B,MAAM,CAAC,OAAO,GAAG;QACf,iBAAiB,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;QAC1D,IAAI,aAAa,EAAE;YACjB,OAAO,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;SACvC;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC;CACH;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,kBAAkB,EAAE,CAAC;AAEnD,MAAM,UAAU,gBAAgB,CAAC,KAA6B;IAC5D,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC/C,CAAC;AAED,SAAS,kBAAkB;IACzB,IAAI,iBAAiB,CAAC,cAAc,EAAE;QACpC,OAAO,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;KACrD;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import ExpoErrorRecovery from './ExpoErrorRecovery';\nimport { Platform } from 'react-native';\n\nlet recoveredPropsToSave: String | null = null;\nlet globalHandler;\nif (Platform.OS !== 'web') {\n  globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(recoveredPropsToSave);\n    }\n    globalHandler(error, isFatal);\n  });\n} else {\n  globalHandler = window.onerror;\n\n  window.onerror = function() {\n    ExpoErrorRecovery.saveRecoveryProps(recoveredPropsToSave);\n    if (globalHandler) {\n      return globalHandler.apply(arguments);\n    }\n    return false;\n  };\n}\n\nexport const recoveredProps = _getRecoveredProps();\n\nexport function setRecoveryProps(props: { [key: string]: any }): void {\n  recoveredPropsToSave = JSON.stringify(props);\n}\n\nfunction _getRecoveredProps(): { [key: string]: any } | null {\n  if (ExpoErrorRecovery.recoveredProps) {\n    return JSON.parse(ExpoErrorRecovery.recoveredProps);\n  }\n  return null;\n}\n"]}